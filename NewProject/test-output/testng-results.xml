<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="2" total="2" passed="0">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="15145" started-at="2019-01-14T11:57:13Z" finished-at="2019-01-14T11:57:28Z">
    <groups>
    </groups>
    <test name="Test1" duration-ms="14327" started-at="2019-01-14T11:57:13Z" finished-at="2019-01-14T11:57:28Z">
      <class name="testpackage.TestcaseDemo">
        <test-method status="PASS" signature="beforTest()[pri:0, instance:testpackage.TestcaseDemo@1604f19]" name="beforTest" is-config="true" duration-ms="76" started-at="2019-01-14T17:27:13Z" finished-at="2019-01-14T17:27:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforTest -->
        <test-method status="PASS" signature="beforeMethod(java.lang.String, java.lang.String)[pri:0, instance:testpackage.TestcaseDemo@1604f19]" name="beforeMethod" is-config="true" duration-ms="6683" started-at="2019-01-14T17:27:13Z" finished-at="2019-01-14T17:27:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[CH]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[http://localhost:8888/]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="testCase2()[pri:0, instance:testpackage.TestcaseDemo@1604f19]" name="testCase2" duration-ms="5188" started-at="2019-01-14T17:27:20Z" finished-at="2019-01-14T17:27:25Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:496)
	at org.testng.Assert.assertTrue(Assert.java:42)
	at org.testng.Assert.assertTrue(Assert.java:52)
	at testpackage.TestcaseDemo.testCase2(TestcaseDemo.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.access$000(SuiteRunner.java:39)
	at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:393)
	at org.testng.internal.thread.ThreadUtil$2.call(ThreadUtil.java:64)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase2 -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testpackage.TestcaseDemo@1604f19]" name="afterMethod" is-config="true" duration-ms="37" started-at="2019-01-14T17:27:25Z" finished-at="2019-01-14T17:27:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testCase2 status=FAILURE method=TestcaseDemo.testCase2()[pri:0, instance:testpackage.TestcaseDemo@1604f19] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:testpackage.TestcaseDemo@1604f19]" name="afterClass" is-config="true" duration-ms="2308" started-at="2019-01-14T17:27:25Z" finished-at="2019-01-14T17:27:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
      </class> <!-- testpackage.TestcaseDemo -->
    </test> <!-- Test1 -->
    <test name="Test2" duration-ms="15145" started-at="2019-01-14T11:57:13Z" finished-at="2019-01-14T11:57:28Z">
      <class name="testpackage.TestcaseDemo">
        <test-method status="PASS" signature="beforTest()[pri:0, instance:testpackage.TestcaseDemo@3884b2]" name="beforTest" is-config="true" duration-ms="78" started-at="2019-01-14T17:27:13Z" finished-at="2019-01-14T17:27:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforTest -->
        <test-method status="PASS" signature="beforeMethod(java.lang.String, java.lang.String)[pri:0, instance:testpackage.TestcaseDemo@3884b2]" name="beforeMethod" is-config="true" duration-ms="7424" started-at="2019-01-14T17:27:13Z" finished-at="2019-01-14T17:27:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[CH]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[http://localhost:8888/]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="testCase2()[pri:0, instance:testpackage.TestcaseDemo@3884b2]" name="testCase2" duration-ms="4895" started-at="2019-01-14T17:27:21Z" finished-at="2019-01-14T17:27:26Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:496)
	at org.testng.Assert.assertTrue(Assert.java:42)
	at org.testng.Assert.assertTrue(Assert.java:52)
	at testpackage.TestcaseDemo.testCase2(TestcaseDemo.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.access$000(SuiteRunner.java:39)
	at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:393)
	at org.testng.internal.thread.ThreadUtil$2.call(ThreadUtil.java:64)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase2 -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testpackage.TestcaseDemo@3884b2]" name="afterMethod" is-config="true" duration-ms="29" started-at="2019-01-14T17:27:26Z" finished-at="2019-01-14T17:27:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testCase2 status=FAILURE method=TestcaseDemo.testCase2()[pri:0, instance:testpackage.TestcaseDemo@3884b2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:testpackage.TestcaseDemo@3884b2]" name="afterClass" is-config="true" duration-ms="2688" started-at="2019-01-14T17:27:26Z" finished-at="2019-01-14T17:27:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
      </class> <!-- testpackage.TestcaseDemo -->
    </test> <!-- Test2 -->
  </suite> <!-- Suite -->
</testng-results>
